{"version":3,"sources":["ProgressBar.js","RadioPercentage.js","ErrorMessage.js","services/synonymService.js","App.js","serviceWorker.js","index.js"],"names":["Filler","props","className","style","width","percentage","ProgressBar","fillerClassName","ProgressBarWrapper","classes","this","display","verticalAlign","progressBar","filler","React","Component","withStyles","theme","position","height","borderRadius","border","textAlign","background","transition","percentageText","fontFamily","padding","RadioPercentage","labelClass","isDisabled","userAnswer","value","answer","radioLabel","label","FormControlLabel","control","Radio","color","disabled","ErrorMessage","isDisplayed","fontSize","baseURL","params","a","accessURL","axios","get","res","data","getQuestion","App","state","noAnswerOnSubmit","words","synonym","totalQuestions","correctAnswers","aiCorrectAnswers","handleSubmit","e","setState","maxPercentage","Math","max","map","word","aiWordChoices","forEach","wordObj","push","includes","handleNext","synonymService","then","question","handleChange","target","radioItems","elem","idx","key","FormControl","component","formControl","FormLabel","RadioGroup","aria-label","name","onChange","Box","m","Button","variant","onClick","margin","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2235425f.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nconst styles = theme => ({\n  progressBar: {\n    position: \"relative\",\n    height: 20,\n    width: 350,\n    borderRadius: 50,\n    border: \"1px solid #333\",\n    textAlign: 'center',\n  },\n  filler: {\n    background: \"#1DA598\",\n    height: \"100%\",\n    borderRadius: \"inherit\",\n    transition: \"width 1.5s ease-in\"\n  },\n  percentageText: {\n    fontFamily: \"Roboto\",\n    padding: 5\n  }\n});\n\nconst Filler = props => {\n  return (\n    <div\n      className={props.className}\n      style={{ width: `${props.percentage}%` }}\n    >\n      {props.percentage}%\n    </div>\n  );\n};\nconst ProgressBar = props => {\n  return (\n    <div className={props.className}>\n      <Filler className={props.fillerClassName} percentage={props.percentage} />\n    </div>\n  );\n};\n\nclass ProgressBarWrapper extends React.Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <div style={{ display: \"inline-block\", verticalAlign: \"middle\" }}>\n          <ProgressBar\n            className={classes.progressBar}\n            fillerClassName={classes.filler}\n            percentage={this.props.percentage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nProgressBarWrapper.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(ProgressBarWrapper);\n","import React from \"react\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport ProgressBarWrapper from \"./ProgressBar\";\nimport './RadioPercentage.css';\n\nclass RadioPercentage extends React.Component {\n\n  render() {\n    let labelClass = '';\n    if (this.props.isDisabled) {\n        if (this.props.userAnswer === this.props.value &&\n            this.props.userAnswer !== this.props.answer)\n        {\n            labelClass = 'wrong-answer';\n        }\n        if (this.props.answer === this.props.value)\n        {\n            labelClass = 'right-answer';\n        }\n    }\n    const radioLabel = <span className={labelClass}>{this.props.label}</span>;\n\n    return (\n      <div>\n        <div\n          style={{\n            display: \"inline-block\",\n            verticalAlign: \"middle\",\n            width: 150\n          }}\n        >\n          <FormControlLabel\n            value={this.props.value}\n            control={<Radio color=\"default\"/>}\n            disabled={this.props.isDisabled}\n            label={radioLabel}\n          />\n        </div>\n        <div\n          style={{\n            display: \"inline-block\",\n            verticalAlign: \"middle\"\n          }}\n        >\n          <ProgressBarWrapper percentage={this.props.percentage} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RadioPercentage;\n","import React from 'react';\n\nexport default function ErrorMessage(props) {\n    if (!props.isDisplayed) return null;\n    return (\n        <div style={{color: 'red', fontSize: '.9em'}}>\n            User must select an answer to submit.\n        </div>\n    );\n}","import axios from 'axios';\n\nconst baseURL = 'https://semantic-similarity-backend-s2zuhmr2fa-uc.a.run.app/';\n\nasync function getQuestion(params)\n{\n    const accessURL = `${baseURL}getQuestion`;\n\n    let res = await axios.get(accessURL, { params });\n    return res.data;\n}\n\nexport default {\n    getQuestion\n};","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Button from \"@material-ui/core/Button\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Box from \"@material-ui/core/Box\";\nimport PropTypes from \"prop-types\";\nimport RadioPercentage from \"./RadioPercentage\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport synonymService from './services/synonymService';\n\nconst styles = theme => ({\n  formControl: {\n    margin: theme.spacing(3)\n  }\n});\n\nclass App extends React.Component {\n  state = {\n    answer: '',\n    isDisabled: false,\n    userAnswer: '',\n    noAnswerOnSubmit: false,\n    words: [],\n    synonym: '',\n    totalQuestions: 1,\n    correctAnswers: 0,\n    aiCorrectAnswers: 0,\n  }\n\n  componentWillMount() {\n    synonymService.getQuestion().then(question => {\n      this.setState(question)\n    });\n  }\n\n  handleSubmit = (e) => {\n    if (!this.state.userAnswer) {\n      this.setState({noAnswerOnSubmit: true});\n    }\n    else {\n      if (this.state.userAnswer === this.state.answer) this.setState({correctAnswers: this.state.correctAnswers+1});\n\n      let maxPercentage = Math.max(...this.state.words.map(word => word.percentage));\n\n      let aiWordChoices = [];\n      this.state.words.forEach((wordObj) => {\n        if (wordObj.percentage === maxPercentage) aiWordChoices.push(wordObj.word); \n      });\n\n      if (aiWordChoices.includes(this.state.answer)) this.setState({aiCorrectAnswers: this.state.aiCorrectAnswers+1});\n\n      this.setState({ isDisabled: true, noAnswerOnSubmit: false });\n    }\n  }\n\n  handleNext = (e) => {\n    synonymService.getQuestion().then(question => {\n      this.setState(question);\n    }).then(() => {\n      this.setState({\n        userAnswer: '', \n        isDisabled: false,\n        noAnswerOnSubmit: false,\n        totalQuestions: this.state.totalQuestions+1,\n      });\n    });\n  }\n\n  handleChange = (e) => {\n    this.setState({userAnswer: e.target.value});\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    const radioItems = this.state.words.map((elem,idx) =>\n      <RadioPercentage\n        userAnswer={this.state.userAnswer}\n        answer={this.state.answer}\n        isDisabled={this.state.isDisabled}\n        label={elem.word}\n        value={elem.word}\n        percentage={elem.percentage}\n        key={idx}\n        />\n    );\n\n    return (\n      <div>\n        <FormControl component=\"fieldset\" className={classes.formControl}>\n          <div>Correct user answers per question: {this.state.correctAnswers}/{this.state.totalQuestions}</div>\n          <div>Correct AI answers per question: {this.state.aiCorrectAnswers}/{this.state.totalQuestions}</div>\n          <FormLabel component=\"legend\">\n            Select the closest synonym to <b>{this.state.synonym}</b>:\n          </FormLabel>\n          <ErrorMessage isDisplayed={this.state.noAnswerOnSubmit}/>\n          <RadioGroup aria-label=\"synonym\" name=\"synonym1\" value={this.state.userAnswer} onChange={this.handleChange}>\n            { radioItems }            \n          </RadioGroup>\n          <Box m={2}>\n            <Button variant=\"contained\" onClick={this.handleSubmit}>Submit</Button>\n            <Button color=\"primary\" onClick={this.handleNext}>Next Question</Button>\n          </Box>\n        </FormControl>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}